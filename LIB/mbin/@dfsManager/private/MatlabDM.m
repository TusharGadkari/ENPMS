function [methodinfo,structs,enuminfo]=MatlabDM;
%MATLABDM Create structures to define interfaces found in 'MatlabDM'.

%This function was generated by loadlibrary.m parser version 1.1.6.22 on Mon Jan 28 15:12:06 2008
%perl options:'MatlabDM.i -outfile=MatlabDM.m'
ival={cell(1,0)}; % change 0 to the actual number of functions to preallocate the data.
fcns=struct('name',ival,'calltype',ival,'LHS',ival,'RHS',ival,'alias',ival);
structs=[];enuminfo=[];fcnNum=1;
%  int DMOpen ( char * filename , int filetype ); 
fcns.name{fcnNum}='DMOpen'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'cstring', 'int32'};fcnNum=fcnNum+1;
%  int DMIsOpen ( int DMid ); 
fcns.name{fcnNum}='DMIsOpen'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'int32'};fcnNum=fcnNum+1;
%  int DMIsInitialized ( int DMid ); 
fcns.name{fcnNum}='DMIsInitialized'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'int32'};fcnNum=fcnNum+1;
%  int DMCreateSkeleton ( char * filename , int filetype , int datatype ); 
fcns.name{fcnNum}='DMCreateSkeleton'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'cstring', 'int32', 'int32'};fcnNum=fcnNum+1;
%  void DMCreate ( int DMid ); 
fcns.name{fcnNum}='DMCreate'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'int32'};fcnNum=fcnNum+1;
%  mxArray * DMGetItemDefs ( int DMid ); 
fcns.name{fcnNum}='DMGetItemDefs'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}='MATLAB array'; fcns.RHS{fcnNum}={'int32'};fcnNum=fcnNum+1;
%  void DMAddItem ( int DMid , char * mname , char * mdescr , char * eumtypeid , char * eumunitid , int elmtbased ); 
fcns.name{fcnNum}='DMAddItem'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'int32', 'cstring', 'cstring', 'cstring', 'cstring', 'int32'};fcnNum=fcnNum+1;
%  void DMClose ( int DMid ); 
fcns.name{fcnNum}='DMClose'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'int32'};fcnNum=fcnNum+1;
%  void DMCloseAll (); 
fcns.name{fcnNum}='DMCloseAll'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}=[];fcnNum=fcnNum+1;
%  int DMSave ( int DMid , char * filename ); 
fcns.name{fcnNum}='DMSave'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'int32', 'cstring'};fcnNum=fcnNum+1;
%  mxArray * DMGetFileName ( int DMid ); 
fcns.name{fcnNum}='DMGetFileName'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}='MATLAB array'; fcns.RHS{fcnNum}={'int32'};fcnNum=fcnNum+1;
%  void DMSetFileName ( int DMid , char * filename ); 
fcns.name{fcnNum}='DMSetFileName'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'int32', 'cstring'};fcnNum=fcnNum+1;
%  mxArray * DMGetFileTitle ( int DMid ); 
fcns.name{fcnNum}='DMGetFileTitle'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}='MATLAB array'; fcns.RHS{fcnNum}={'int32'};fcnNum=fcnNum+1;
%  void DMSetFileTitle ( int DMid , char * filedescr ); 
fcns.name{fcnNum}='DMSetFileTitle'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'int32', 'cstring'};fcnNum=fcnNum+1;
%  mxArray * DMGetFileDescr ( int DMid ); 
fcns.name{fcnNum}='DMGetFileDescr'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}='MATLAB array'; fcns.RHS{fcnNum}={'int32'};fcnNum=fcnNum+1;
%  void DMSetFileDescr ( int DMid , char * filetitle ); 
fcns.name{fcnNum}='DMSetFileDescr'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'int32', 'cstring'};fcnNum=fcnNum+1;
%  mxArray * DMGetProjection ( int DMid ); 
fcns.name{fcnNum}='DMGetProjection'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}='MATLAB array'; fcns.RHS{fcnNum}={'int32'};fcnNum=fcnNum+1;
%  int DMSetSpatialDefReg ( int DMid , char * proj , mxArray * mxorigo , double orientation , int dim , mxArray * mxspatial ); 
fcns.name{fcnNum}='DMSetSpatialDefReg'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'int32', 'cstring', 'MATLAB array', 'double', 'int32', 'MATLAB array'};fcnNum=fcnNum+1;
%  int DMSetSpatialDefFEM ( int DMid , char * proj , mxArray * mxElmts , mxArray * mxNodes , int ndim , int nlayers ); 
fcns.name{fcnNum}='DMSetSpatialDefFEM'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'int32', 'cstring', 'MATLAB array', 'MATLAB array', 'int32', 'int32'};fcnNum=fcnNum+1;
%  mxArray * DMGetBathymetry ( int DMid ); 
fcns.name{fcnNum}='DMGetBathymetry'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}='MATLAB array'; fcns.RHS{fcnNum}={'int32'};fcnNum=fcnNum+1;
%  void DMSetBathymetry ( int DMid , mxArray * mxval ); 
fcns.name{fcnNum}='DMSetBathymetry'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'int32', 'MATLAB array'};fcnNum=fcnNum+1;
%  int DMGetNumDims ( int DMid ); 
fcns.name{fcnNum}='DMGetNumDims'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'int32'};fcnNum=fcnNum+1;
%  int DMGetNumElmts ( int DMid ); 
fcns.name{fcnNum}='DMGetNumElmts'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'int32'};fcnNum=fcnNum+1;
%  int DMGetNumNodes ( int DMid ); 
fcns.name{fcnNum}='DMGetNumNodes'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'int32'};fcnNum=fcnNum+1;
%  int DMGetNumLayers ( int DMid ); 
fcns.name{fcnNum}='DMGetNumLayers'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'int32'};fcnNum=fcnNum+1;
%  mxArray * DMGetGeoOrigin ( int DMid ); 
fcns.name{fcnNum}='DMGetGeoOrigin'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}='MATLAB array'; fcns.RHS{fcnNum}={'int32'};fcnNum=fcnNum+1;
%  double DMGetOrientation ( int DMid ); 
fcns.name{fcnNum}='DMGetOrientation'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}='double'; fcns.RHS{fcnNum}={'int32'};fcnNum=fcnNum+1;
%  mxArray * DMGetRegOrigin ( int DMid ); 
fcns.name{fcnNum}='DMGetRegOrigin'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}='MATLAB array'; fcns.RHS{fcnNum}={'int32'};fcnNum=fcnNum+1;
%  mxArray * DMGetRegSizes ( int DMid ); 
fcns.name{fcnNum}='DMGetRegSizes'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}='MATLAB array'; fcns.RHS{fcnNum}={'int32'};fcnNum=fcnNum+1;
%  mxArray * DMGetRegSpacing ( int DMid ); 
fcns.name{fcnNum}='DMGetRegSpacing'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}='MATLAB array'; fcns.RHS{fcnNum}={'int32'};fcnNum=fcnNum+1;
%  int DMCreateTemporalDef ( int DMid , int timeaxistype , mxArray * mxstartdate , int numtimesteps , double timestepsec ); 
fcns.name{fcnNum}='DMCreateTemporalDef'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'int32', 'int32', 'MATLAB array', 'int32', 'double'};fcnNum=fcnNum+1;
%  mxArray * DMGetTemporalDef ( int DMid ); 
fcns.name{fcnNum}='DMGetTemporalDef'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}='MATLAB array'; fcns.RHS{fcnNum}={'int32'};fcnNum=fcnNum+1;
%  mxArray * DMGetTemporalStartEnd ( int DMid ); 
fcns.name{fcnNum}='DMGetTemporalStartEnd'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}='MATLAB array'; fcns.RHS{fcnNum}={'int32'};fcnNum=fcnNum+1;
%  mxArray * DMGetTime ( int DMid , int timestepno ); 
fcns.name{fcnNum}='DMGetTime'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}='MATLAB array'; fcns.RHS{fcnNum}={'int32', 'int32'};fcnNum=fcnNum+1;
%  void DMSetTime ( int DMid , int timestepno , mxArray * mxdate ); 
fcns.name{fcnNum}='DMSetTime'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'int32', 'int32', 'MATLAB array'};fcnNum=fcnNum+1;
%  mxArray * DMGetElmts ( int DMid ); 
fcns.name{fcnNum}='DMGetElmts'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}='MATLAB array'; fcns.RHS{fcnNum}={'int32'};fcnNum=fcnNum+1;
%  mxArray * DMGetNodes ( int DMid ); 
fcns.name{fcnNum}='DMGetNodes'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}='MATLAB array'; fcns.RHS{fcnNum}={'int32'};fcnNum=fcnNum+1;
%  mxArray * DMGetElmtNodeConnectivity ( int DMid ); 
fcns.name{fcnNum}='DMGetElmtNodeConnectivity'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}='MATLAB array'; fcns.RHS{fcnNum}={'int32'};fcnNum=fcnNum+1;
%  mxArray * DMGetItemTimestep ( int DMid , int itemno , int timestepno ); 
fcns.name{fcnNum}='DMGetItemTimestep'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}='MATLAB array'; fcns.RHS{fcnNum}={'int32', 'int32', 'int32'};fcnNum=fcnNum+1;
%  int DMSetItemTimestep ( int DMid , int itemno , int timestepno , mxArray * mxval ); 
fcns.name{fcnNum}='DMSetItemTimestep'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'int32', 'int32', 'int32', 'MATLAB array'};fcnNum=fcnNum+1;
%  mxArray * DMGetSpatialItemTimestep ( int DMid , int itemno , int timestepno ); 
fcns.name{fcnNum}='DMGetSpatialItemTimestep'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}='MATLAB array'; fcns.RHS{fcnNum}={'int32', 'int32', 'int32'};fcnNum=fcnNum+1;
%  int DMSetSpatialItemTimestep ( int DMid , int itemno , int timestepno , mxArray * mxval ); 
fcns.name{fcnNum}='DMSetSpatialItemTimestep'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'int32', 'int32', 'int32', 'MATLAB array'};fcnNum=fcnNum+1;
%  mxArray * DMItemTypeGetAll (); 
fcns.name{fcnNum}='DMItemTypeGetAll'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}='MATLAB array'; fcns.RHS{fcnNum}=[];fcnNum=fcnNum+1;
%  mxArray * DMItemTypeGetUnits ( const char * itemid ); 
fcns.name{fcnNum}='DMItemTypeGetUnits'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}='MATLAB array'; fcns.RHS{fcnNum}={'cstring'};fcnNum=fcnNum+1;
%  mxArray * DMUnitGetAll (); 
fcns.name{fcnNum}='DMUnitGetAll'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}='MATLAB array'; fcns.RHS{fcnNum}=[];fcnNum=fcnNum+1;
%  mxArray * DMUnitGetAbbr ( char * unitid ); 
fcns.name{fcnNum}='DMUnitGetAbbr'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}='MATLAB array'; fcns.RHS{fcnNum}={'cstring'};fcnNum=fcnNum+1;
%  mxArray * DMTest1 ( int in ); 
fcns.name{fcnNum}='DMTest1'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}='MATLAB array'; fcns.RHS{fcnNum}={'int32'};fcnNum=fcnNum+1;
%  mxArray * DMTest2 ( int in ); 
fcns.name{fcnNum}='DMTest2'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}='MATLAB array'; fcns.RHS{fcnNum}={'int32'};fcnNum=fcnNum+1;
methodinfo=fcns;